import '../utf8.grm' as utf;
import '../util.grm' as util;

############################################################################################
#                                              
#    Verbalizing grammar for cardinal numbers 
#
#    TODO: train a number grammar like described in: 
#
#    Kyle Gorman and Richard Sproat. "Minimally supervised models for number
#    normalization." Transactions of the Association for Computational Linguistics. 2016.
#
#    The current grammar can normalize numbers up to 999,000,000 
#                                             
#############################################################################################

# LEXICON DATA

cardinal_simple = Optimize[StringFile['lexicon/cardinals.tsv', 'utf8', 'utf8']];
cardinal_2to9 = Optimize[StringFile['lexicon/cardinals2to9.tsv', 'utf8', 'utf8']];
cardinal_m = Optimize[StringFile['lexicon/cardinal_mask.tsv', 'utf8', 'utf8']];
units_notNeutral = Optimize[StringFile['lexicon/units_notNeutral.txt', 'utf8', 'utf8']];
teens = Optimize[StringFile['lexicon/teens.tsv', 'utf8', 'utf8']];
decades = Optimize[StringFile['lexicon/decades.tsv', 'utf8', 'utf8']];
export neutral_units2to9 = Optimize[StringFile['lexicon/neutral_units2to9.txt', 'utf8', 'utf8']];

# FREQUENT REPLACEMENTS
# TODO: which exports do we really need?

insspace = util.Insert[" ".utf8];
insand = util.Insert[" og ".utf8];
delzero = util.Delete["0".utf8];
delone = util.Delete["1".utf8];

zero = "0".utf8 : "núll".utf8;
one_neutr = "1".utf8 : "eitt_tfhen".utf8;
one_mask = "1".utf8 : "einn_tfken".utf8;
ten = "10".utf8 : "tíu".utf8;

# GRAMMAR

export teensplus = ten | teens;
export neutral_units = one_neutr | neutral_units2to9;
export units = units_notNeutral | neutral_units;
export cardinal_simple_all = cardinal_simple;
export cardinal_mask = cardinal_m;

cardinal_decades = (decades util.Delete["0".utf8]) |
  decades util.Insert[" og ".utf8] cardinal_simple;

export numbers_20_to_99 = (decades util.Delete["0".utf8]) |
  decades util.Insert[" og ".utf8] ((units_notNeutral <-3>) | (neutral_units <-4.0>));
  
export numbers_20_to_99_neutr = (decades util.Delete["0".utf8]) |
  (decades util.Insert[" og ".utf8] neutral_units);

# eitt hundrað, tvö hundruð, etc.
hundreds_all = (one_neutr util.Insert[" hundrað".utf8]) | (neutral_units2to9 util.Insert[" hundruð".utf8]);

# hundrað, tvö hundruð, etc.
hundreds_plain = (util.Delete["1".utf8] util.Insert[" hundrað".utf8]) | (neutral_units2to9 util.Insert[" hundruð".utf8]);

cardinal_hundreds_all = Optimize[
  hundreds_all util.Delete["0".utf8] util.Delete["0".utf8] |
  (hundreds_all util.Delete["0".utf8] util.Insert[" og ".utf8] cardinal_simple_all) |
  (hundreds_all util.Insert[" og ".utf8] teens) |
  (hundreds_all (insspace|insand) cardinal_decades)]
;

cardinal_hundreds_plain = Optimize[
  hundreds_plain util.Delete["0".utf8] util.Delete["0".utf8] |
  (hundreds_plain util.Delete["0".utf8] util.Insert[" og ".utf8] cardinal_simple_all) |
  (hundreds_plain util.Insert[" og ".utf8] teens) |
  (hundreds_plain (insspace|insand) cardinal_decades)]
;

#1900, 1905, 1914
year_hundreds = Optimize[teens insspace ("".utf8 : "hundruð".utf8)
  ((delzero delzero) | (delzero insand neutral_units) | (insand teensplus) | ((insspace|insand) numbers_20_to_99_neutr))];

#2000, 2005, 2019
year_mill = Optimize[neutral_units2to9 util.Insert[" ".utf8] ("".utf8 : "þúsund".utf8)
  ((delzero delzero delzero) |
  (delzero delzero insand neutral_units) |
  (util.Delete["0".utf8] util.Insert[" og ".utf8] teensplus) |
  (delzero (insspace|insand) numbers_20_to_99_neutr))]
;

# TODO: we still need a classifier for year
year = Optimize[year_hundreds | year_mill];

#
# The larger numbers are organized as 'number + tail'
#
# We divide the thousands into 1000-1099 / 1100-1999 / 2000-9999
# This way we can ensure that a number like 1700 is normalized to 'sautján hundruð'
# instead of 'eitt þúsund og sjö hundruð'. This might, however, not always be the
# preferred choice, but to make the correct choice demands the appropriate classifier.
#

tail_1000_to_1099 = Optimize[
  ("".utf8 : "þúsund".utf8)
  (delzero delzero delzero |
  (delzero delzero insand units) |
  (delzero insand teensplus) |
  (delzero (insspace | insand) numbers_20_to_99))]
;

numbers_1000_to_1099 = Optimize[
   one_neutr insspace tail_1000_to_1099];
   
numbers_1100_to_1999 = Optimize[teens insspace ("".utf8 : "hundruð".utf8)
  ((delzero delzero) | (delzero insand units) | (insand teensplus) | ((insspace|insand) numbers_20_to_99))];

tail_2000_to_9999 = Optimize[
  ("".utf8 : "þúsund".utf8)
  (delzero delzero delzero |
  (delzero delzero insand units) |
  (delzero insand teensplus) |
  (delzero (insspace | insand) numbers_20_to_99) |
  ((insspace|insand) cardinal_hundreds_all))]
;

numbers_2000_to_9999 = Optimize[
  (neutral_units2to9 insspace)
  tail_2000_to_9999]
;

numbers_10000_to_99999 = Optimize[
  (teensplus | numbers_20_to_99)
  insspace
  tail_2000_to_9999]
;

numbers_100000_to_999999 = Optimize[
  cardinal_hundreds_plain
  insspace
  tail_2000_to_9999]
;

tail_1M_to_9M = Optimize[
  ("".utf8 : ("milljón".utf8 | "milljónar".utf8 |
  "milljónir".utf8 | "milljónum".utf8 | "milljóna".utf8 ))
  (delzero delzero delzero delzero delzero delzero |
  (delzero delzero delzero delzero delzero insand units <-4>) |
  (delzero delzero delzero delzero (insspace | insand) (teens | numbers_20_to_99) <-6>) |
  (delzero delzero delzero (insspace | insand) cardinal_hundreds_plain <-8>) |
  (delzero delzero (insspace | insand) (numbers_1000_to_1099 | numbers_1100_to_1999 | numbers_2000_to_9999)) |
  (delzero (insspace | insand) numbers_10000_to_99999 <-60>) |
  ((insspace | insand) numbers_100000_to_999999 <-150>))]
;

numbers_1M_to_9M = Optimize[
  units
  insspace
  tail_1M_to_9M]
;

numbers_10M_to_99M = Optimize[
  (teensplus | numbers_20_to_99)
  insspace
  tail_1M_to_9M]
;

numbers_100M_to_999M = Optimize[
  cardinal_hundreds_plain
  insspace
  tail_1M_to_9M]
;

numbers_to_99 = Optimize[ zero | cardinal_simple_all | teensplus | cardinal_decades];

export cardinal = Optimize[
  numbers_to_99 |
  (cardinal_hundreds_plain) |
  (numbers_1000_to_1099) |
  (numbers_1100_to_1999) |
  (numbers_2000_to_9999) |
  (numbers_10000_to_99999) |
  (numbers_100000_to_999999) |
  (numbers_1M_to_9M) |
  (numbers_10M_to_99M) |
  (numbers_100M_to_999M) |
  (year) ]
;

export CARDINAL = cardinal;
export DIGITS = cardinal;

s = util.s;

cardinal_markup =
  util.Delete["cardinal|integer:" s]
  cardinal
  util.Delete[s "|"]
;

export CARDINAL_MARKUP = Optimize[cardinal_markup];