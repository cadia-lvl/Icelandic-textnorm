import '../utf8.grm' as utf;
import '../util.grm' as util;

q = util.quote;

# Markup for ordinary tokens that don't match anything else.
# output is a "name:" token. Cost is to make this analysis more expensive.

# Test: the Sparrowhawk-way is to treat tokens that do not match anything else as words. 
# This means that the verbalizer does not process these tokens. We only want tokens, that are 
# likely to be processed by the TTS g2p module, to be classified as "words". For the rest of non-matching
# tokens we need a "nsw" class.

capital = utf.ALPHABET utf.alphabet+;
lowercase = utf.alphabet+;

word =
  util.Insert["name: " q]
  ((capital <10>)| (lowercase <10>))
  util.Insert[q]
;

#word =
#  util.Insert["name: " q]
#  (utf.notSpace <100>)+
#  util.Insert[q]
#;

export WORD = Optimize[word];